---
title: "COVID worksheet"
author: "Prashant Kalvapalle"
format: html
editor: visual
---

## Task of the day

We shall remake an iconic plot showing spikes in the number of COVID cases from the [New York Times](https://www.nytimes.com/interactive/2021/us/covid-cases.html) using ggplot. We start from the data [here](https://github.com/nytimes/covid-19-data/tree/master). And we get the quarto workflow for free that allows anyone else to quickly understand and reproduce this + build on it!

Here's the plot we are going to make

![](../assets/NYT_COVID_new_cases.png)

### Side references

Here is a similar [workflow](https://medium.com/@nickryanpaul/advanced-data-visualization-with-r-and-ggplot2-recreating-the-new-york-times-covid-tracker-359da1795e78) that makes exactly the same kind of NYT style plot

And another [workflow](https://nandeshwar.info/data-visualization/nyt-data-visualization-r/) for a different kind of plot if you want to go through it in your own time **after the class**

## Let's load packages

Load all necessary packages upfront.

(***Automated check to install packages***) If there is a package being called with `library('pkg')` or `pkg::function()` when it is not installed, Rstudio automatically prompts above that the package is not installed. So you can quickly install in by clicking on the `install` button here

![](../assets/package_install_warning.png)

(*old school method*): If using the `install.packages` command within a `R` chunk in `.qmd`, remember you don't want to run the install.packages every single time, only the first time to download the package. Comment the install.packages to prevent it from being rerun every time you knit/Render the `.qmd` while leaving a record of what was installed for future readers of the file.

*Side note*: To check that you have the package downloaded, go to `Packages` tab (near `files/Plots`) and search the package name! (*loaded packages with* `library()` *will have a checkmark next to them)*

```{r load-packages, warning = FALSE, message = FALSE}
# source('0.general_functions.R') # source an R script with shortcut functions

library(tidyverse) # load tidyverse package

# Make sure you have these two packages installed
# install_or_load_library('zoo') # package for timeseries: rolling avg function
# install_or_load_library('plotly') # for quick interactive plots
```

## Load data now

load data from the `.csv` file. Make sure the path matches where you stored the file relative to where the `.qmd` file is located

```{r load-data}
df <- read_csv('../data/us_covid.csv')

# ignore this stuff for now, this is only relevant in the end 
# polished_df <- read_csv('../data/covid_rolling_avgs.csv')

```

## Know thy data

Do you know what column names are in your data?

You need to quickly explore the data to know the column names, data types and approx \# of rows and columns.

-   Start by clicking on the data within the `Environment` panel / use `view(df)`

-   To keep the column names always visible, which is very useful while typing out the `ggplot` commands, click on the play button

    ![](../assets/data_glance.png)

Now let's get to know the data visually!

### Exploratory plot

R makes it easy to quickly create plots to visualize data and get a general sense of it's trends. Explore the data by plotting it!

-   Put the `date` on the `x-axis` and

-   `cases` on the `y-axis`

```{r eda_plot}
ggplot(df, 
       aes(date, cases)) + 
  
  geom_point() + 
  geom_line()
```

What do you notice?

-   The data doesn't look anything like the graph we desire

-   This is because the data is [cumulative](https://github.com/nytimes/covid-19-data/tree/master#cumulative-cases-and-deaths) =\> `cases` = *total number of cases till date*

    -   We want the daily new cases and need to do `data wrangling` for calculating this

![](../assets/cummulative_nyt_description.png)

## Data wrangling

### cummulative -\> new cases

How do you get the raw data from the cumulative data?

*Hint: use the* `diff()` function. Hidden [hint](https://stackoverflow.com/a/21418310/9049673)2.

```{r wrangle-1}
raw_df <- 
  mutate(df, new_cases = c(cases[1], diff(cases)))
```

### Smoothen data / rolling average (over 7 days)

Calculate the rolling average to smooth the data. The goal is to remove short term fluctuations to minimize distractions/visual appeal

> A rolling average (A.K.A moving average) is commonly used with [time series](https://en.wikipedia.org/wiki/Time_series "Time series") data to **smooth out short-term fluctuations** and **highlight longer-term trends** or cycles. The threshold between short-term and long-term depends on the application, and the parameters of the moving average will be set accordingly. Source: [Wikipedia](https://en.wikipedia.org/wiki/Moving_average)

> the daily number of new cases and deaths, the seven-day rolling average and the seven-day rolling average per 100,000 residents.

```{r wrangle-avgs}
avg_df <- 
  mutate(raw_df, 
         avg_new_cases = 
           zoo::rollmean(new_cases, 
                         7, 
                         fill = NA, 
                         align = 'right') %>% # rolling avg
           signif(digits = 2), # round off to 2 decimals
         
         pretty_avg =
           format.AsIs(avg_new_cases, 
                       digits = 2, 
                       scientific = FALSE)) # format as char 
   
```

## Plot data

Let's plot the data of new cases over time now. This is the number of new cases added per day! **We can create the plot and save it to a variable, this allows us to quickly access it later and add new modifications to the plot!**

```{r first-plot}
plt1 <-  # save the plot to this variable so we can add stuff to it later!
  ggplot(raw_df, 
         aes(x = date, y = new_cases)) + 
  
  geom_point() + 
  geom_line()

#The ggplot is saved as a 'ggplot object' you can do things with the ggplot object such as print it or add more layers/ manipulate it!  
  plt1 %>% print()
```

Plotly is a great package way to make dynamic ggplots that you can interact with by zooming, selecting subset of colours/shapes etc.

For the curious, plotly is cross-platform \~ works in python/Julia/others too!

```{r interactive-plot}
# Plotly is a way to make dynamic ggplots that you can interact with!
plotly::ggplotly(plt1, dynamicTicks = TRUE)
```

## Smoothed plot

plot the rolling averages now

```{r avg-plot}
plt_avg <- # save the plot to this variable so we can add stuff to it later!
  ggplot(avg_df,
         aes(date, avg_new_cases)) + 
  # geom_point(size = .5) + # original plot didn't have points
  geom_line()
  
plt_avg %>% print()

```

interactive plot now

```{r avg-interactive-plt}
plotly::ggplotly(plt_avg, dynamicTicks = T)
```

## Polish the plot (bells & whistles)

You can think of this as the cilantro or garnishing on your dish but without this your plots will only be half as useful to communicate to anyone but yourself!

Now let us polish the plot elements to be more **presentable** and **explanatory** using these references

1.  [ggplot2-specs](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) is a good reference to know the options that can be tweaked to change plot elements.
2.  Refer to [colour related aesthetics](https://ggplot2.tidyverse.org/reference/aes_colour_fill_alpha.html)

**Changes needed on the plot**

-   Colour the line red

    -   Fill in the area below the trendline light red (*hint: use* `geom_area()` *instead of* `geom_line()` *; and use* `fill = 'red'` *but add a transparency of 0.2 using* `alpha = 0.2`*!).*

-   x-axis labels : add months, mentioned in the middle (*figure out how to do this, not in the solution script)*

-   add annotation on the largest peak that says `7-day average` . Can make more controlled/detailed annotations with the [ggforce::](https://ggforce.data-imaginist.com/index.html) package

-   adjust the plot background and gridlines using `theme()` family of functions

    -   Add `theme_classic()` switch to light background with no gridlines *(there are a variety of different base themes you can choose from as a starting point!)*

    -   Then add your own gridlines and format numbers on the y-axis the way NYT likes them

```{r polish-plot1}
y_axis_labels <- 1:4 * 2e5

peak_identity <- filter(avg_df, 
                        avg_new_cases == max(avg_new_cases, na.rm = T))


ggplot(avg_df, aes(date, avg_new_cases)) + 
  
  # replacing geom_line with geom_area to fill for visual appeal
  geom_area(colour = 'red', # outline colour with red
            fill = 'red', alpha = 0.2) + # fill with a transparent red
  
  # Add a title and remove axis labels 
  labs(title = 'New reported cases', # make y axis label as the title!
       x = NULL, y = NULL) + # remove axis labels
  
  # MODIFY X-AXIS LABELS TO SHOW A FEW MONTHS
  # I don't know how to do this, so you figure it out! ðŸ˜‰
  
  
  # label the peak with text (opportinity to explain the y-axis detailed)
  annotate(geom = 'text', label = '7-day average',
           x = peak_identity$date[2], y = peak_identity$avg_new_cases[2]) +
  
  
  # Theme/overall appearance
  theme_classic() + # plain white background, remove all axis elements
  
  
  # Now add specific elements
  
  # add y axis labels with comma formatting
  scale_y_continuous(breaks = y_axis_labels,
                     labels = format(y_axis_labels, 
                                     scientific = FALSE,
                                     big.mark = ',')) + 
  
  # adding light gridlines
  theme(
    panel.grid.major.y = 
      element_line(colour = 'gray',# light gridlines
                   linetype = 2), # that are dashed lines
    
    plot.title.position = 'plot', # align title to the whole plot
    axis.line = element_blank() # remove axis lines
    
  )
```

## Compare to the final figure

Here's the final image we're comparing to

![](../assets/NYT_COVID_new_cases.png){width="497"}

## Actual data that NYT plotted

NYT made a few more manual corrections to the actual data that was eventually plotted. Here's a plot of the same compared to the plot you made

Before you run this, go back to the beginning and make sure you load the data with `polished_df <- read_csv('../data/covid_rolling_avgs.csv')` then remove the `eval=FALSE` to make the chunk run!

```{r eval=FALSE}
plt_NYT <- 
ggplot(polished_df, aes(date, cases_avg)) + 
  
  # geom_point(size = .5) + # original plot didn't have points
  geom_line(colour = 'red') +
  geom_area(fill = 'red', alpha = 0.2) + # fill with a transparent red
  
  theme_classic() # plain white background

library(patchwork)
polished_plt / plt_NYT
```
