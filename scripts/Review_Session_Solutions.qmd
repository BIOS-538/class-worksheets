---
title: "Review Session"
format: html
editor: visual
---

## Review session

### Before we get into coding practice, lets think about some more theory/basic knowledge questions. Write 1-2 sentences for each in your OWN words.

1.  *What is a package? What different ways can you download it? What is proper form for loading packages in an R script?*

2.  *What is a directory?*

3.  *What is a function? What is source code?*

4.  *What is purpose of the pipe operator %\>%?*

5.  *How can errors help you de-bug your code?*

6.  *Why do we leave comments on code?*

7.  *What is data wrangling?*

8.  *Describe the different distributions that we have learned in class.*

Now we will work with data and questions from this source.

<https://tavareshugo.github.io/r-intro-tidyverse-gapminder/10-data_vis_partII/index.html>

We will be using the gapminder data again! By the way, it is called gapminder because **it attempts to provide data that fills the gap in knowledge that people have about developing countries**. It is called "gapminder" after the London underground safety slogan "mind the gap". For this set of questions, we will combine a few different datasets regarding children per women, child mortality, and population.

```{r loading libraries}
library(tidyverse)
library(gapminder)
library(patchwork)
```

For the R code block below and all others, add a descriptive name after the 'r' in the code brackets. This will name the code chunk so that if the code doesn't execute when you render the file R will tell you exactly which code chunk didn't work! This will help with de-bugging. The description should be about what the code block does. We first need to read the csv in.

```{r bringing in data}

gapminder2010 <- read_csv("../Data/gapminder2010_socioeconomic.csv")
```

Now let's make an initial plot of child_mortality vs. children_per_woman, sized by population and colored by world region. Put child_mortality on the x axis and children_per_woman on the y axis. Assign this graph to an object name. To change the size of each point based on population, add: *scale_size_continuous(trans = "log10")* after geom_point()

```{r inital graphing}
p1 <- ggplot(data = gapminder2010, 
       aes(x = child_mortality, y = children_per_woman)) +
  geom_point(aes(colour = world_region, size = population)) +
  scale_colour_brewer(palette = "Dark2") +
  <- scale_size_continuous(trans = "log10")

p1

```

Describe what patterns you see in the data. Use 2-3 sentences:

Now letâ€™s create a new table containing the countries with the highest and lowest incomes in each world region (we can use a grouped filter for this): We will need to remove some NA values.

```{r highest and lowest incomes}
#Could use slice_max() and slice_min()
extreme_income <- gapminder2010 %>% 
  # remove missing values in this variable, and then...
  filter(!is.na(income_per_person)) %>% 
  # group by world region, and then...
  group_by(world_region) %>% 
  # retain cases that have the maximum or minimum income observed, and then...
  filter(income_per_person == max(income_per_person) | income_per_person == min(income_per_person)) %>% 
  # remove grouping information
  ungroup()

# we have 12 rows of data in this filtered table
# makes sense as we expect to have a min and max for each of 6 world regions
extreme_income
```

Now let's label our previous graph with these extremes.

```{r labeling extremes}
p2 <- p1 + 
  geom_text(data = extreme_income,
            aes(label = country))
p2
```

Now customize your graph and make it look pretty. Change title names, remove grey background, change colors. Resize the points to make it easier to tell them apart. See [here](https://www.maths.usyd.edu.au/u/UG/SM/STAT3022/r/current/Misc/data-visualization-2.1.pdf) for cheat sheet. Write 1-3 sentences describing the data.

```{r customizing graph}
p2 + labs(x = "Child Mortality", 
          y = "Children/Woman",
          colour ="World Region", 
          size ="Population Size") +
  theme_bw()
```

Now let's write a for loop that tells us what the religion of all the countries from a certain world_region are as a character string. For example: "The religion of Vietnam is: eastern religions." Make sure to subset by world region first outside of the for loop! write the function first!

PSUEDOCODE

I want to take my data and filter it by each region.

Then I want to run a for loop of some sort. I should use for() to go thru my data step by step and the cat() function to combine things I think.

In order to do this, I think I will need to index by something.

for (i in something) {

}

```{r}
region <- gapminder2010 %>%
  filter(world_region == "east_asia_pacific")

for (i in 1:nrow(region)){
    cat('The religion of', region$country[[i]], "is", region$main_religion[[i]], '\n')
} 
```

You may notice that some of the countries have NA for a relgion! Can you write an if else statement with the for loop where the NA is replaced with unknown?

```{r}
region <- gapminder2010 %>%
  filter(world_region == "east_asia_pacific")

for (i in 1:nrow(region)){
  if(is.na(region$main_religion[[i]]) == FALSE) {
    cat('The religion of', region$country[[i]], "is", region$main_religion[[i]], '\n')} 
  if(region$main_religion[[i]] == "christian") {
    print("okay")
  }
  else {
  cat('The religion of', region$country[[i]], "is unknown\n")
  }
}
```

### Now, lets work more on data wrangling as it is crucial to understand!

In an attempt to further understand the data, Create a new column 'cpw_mean_diff' that takes the mean children per woman and returns how many children **above or below** the global average that women in that country had. For example, if the global average is 1 child, and the country you call has an average children_per_women value of 3, then this function should return the value 2. **Remember some countries have NAs for values in this column so you need to exclude them! Use na.rm = TRUE**

```{r function for information about countries}
#First let's calculate the mean children_per_woman
global_mean_cpw <- mean(gapminder2010$children_per_woman, na.rm=TRUE)

#This function will take the dataframe and global_mean_cpw as input and return a new column of the data set of how many additional children woman have

gapminder2010 <- gapminder2010 %>%
  mutate(cpw_mean_diff = 
           children_per_woman - mean(children_per_woman, na.rm = TRUE))

```

Create a histogram of the distribution of the cpw_mean_diff column. Then try this and then use the facet() function to create separate histograms for each world region! Add a horizontal line at 0 to illustrate how many countries fall below and above the mean. Based on the distribution what information can we learn?

```{r histogram}
gapminder2010 %>%
  ggplot(aes(x = cpw_mean_diff)) + 
  geom_histogram(fill = "black", colour = "grey") +
  geom_vline(xintercept = 0, color = "red") + 
  theme_bw()
```

```{r faceted histogram}
gapminder2010 %>%
  ggplot(aes(x = cpw_mean_diff, fill = world_region)) + 
  geom_histogram(colour = "grey") +
  geom_vline(xintercept = 0, color = "red") +
  facet_wrap(~world_region) +
  theme_bw()
```

Now let's create a new data frame that has the median population and the standard deviation based on world region! **Remember to use group_by() and summarise!** Show the table with the knitr package! Try it now with mean, why do you think we chose median first?

```{r summary of world_regions}
 gapminder2010 %>%
  group_by(world_region) %>%
  summarise(median.pop = median(population, na.rm = TRUE),
            sd.pop = sd(population, na.rm = TRUE)) %>%
   knitr::kable()
```
